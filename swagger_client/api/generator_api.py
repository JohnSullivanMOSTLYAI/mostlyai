# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GeneratorApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_file_to_generator(self, generator_id, filename, **kwargs):  # noqa: E501
        """Add a file to a generator  # noqa: E501

        Creates a new file or appends the existing file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_file_to_generator(generator_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :param FileName filename: (required)
        :param Object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_file_to_generator_with_http_info(generator_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.add_file_to_generator_with_http_info(generator_id, filename, **kwargs)  # noqa: E501
            return data

    def add_file_to_generator_with_http_info(self, generator_id, filename, **kwargs):  # noqa: E501
        """Add a file to a generator  # noqa: E501

        Creates a new file or appends the existing file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_file_to_generator_with_http_info(generator_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :param FileName filename: (required)
        :param Object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id', 'filename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_file_to_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `add_file_to_generator`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `add_file_to_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/file/{filename}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_generator(self, **kwargs):  # noqa: E501
        """Creates a new generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generator(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorsBody body:
        :param str copy_from_id: Id of generator that should be cloned
        :return: Generator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_generator_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_generator_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_generator_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generator_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorsBody body:
        :param str copy_from_id: Id of generator that should be cloned
        :return: Generator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'copy_from_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_generator" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'copy_from_id' in params:
            query_params.append(('copyFromId', params['copy_from_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Generator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_file_from_generator(self, generator_id, filename, **kwargs):  # noqa: E501
        """Delete file from generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_from_generator(generator_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :param FileName filename: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_file_from_generator_with_http_info(generator_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_from_generator_with_http_info(generator_id, filename, **kwargs)  # noqa: E501
            return data

    def delete_file_from_generator_with_http_info(self, generator_id, filename, **kwargs):  # noqa: E501
        """Delete file from generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_from_generator_with_http_info(generator_id, filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :param FileName filename: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id', 'filename']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file_from_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `delete_file_from_generator`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `delete_file_from_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/file/{filename}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_generator(self, generator_id, **kwargs):  # noqa: E501
        """Deletes a generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_generator(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_generator_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_generator_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def delete_generator_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Deletes a generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_generator_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `delete_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_generator_configuration(self, generator_id, **kwargs):  # noqa: E501
        """Download configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_generator_configuration(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_generator_configuration_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_generator_configuration_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def download_generator_configuration_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Download configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_generator_configuration_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_generator_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `download_generator_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generators_generator_id_training_download_get(self, generator_id, **kwargs):  # noqa: E501
        """Download the training logs as zip file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generators_generator_id_training_download_get(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generators_generator_id_training_download_get_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.generators_generator_id_training_download_get_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def generators_generator_id_training_download_get_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Download the training logs as zip file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generators_generator_id_training_download_get_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generators_generator_id_training_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `generators_generator_id_training_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/training/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generator_by_id(self, generator_id, **kwargs):  # noqa: E501
        """Read a generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generator_by_id(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: Generator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generator_by_id_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_generator_by_id_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def get_generator_by_id_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Read a generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generator_by_id_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: Generator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generator_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `get_generator_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Generator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generators(self, **kwargs):  # noqa: E501
        """List generators  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generators(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of items to skip before starting to collect the result set
        :param int size: The numbers of items to return
        :param str sort: Fields and direction used for sorting generators.  Can include multiple fields (e.g., \"name:desc\" or \"status:asc;createdAt:desc\") 
        :param str filter: Filter by a keyword
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generators_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_generators_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_generators_with_http_info(self, **kwargs):  # noqa: E501
        """List generators  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generators_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of items to skip before starting to collect the result set
        :param int size: The numbers of items to return
        :param str sort: Fields and direction used for sorting generators.  Can include multiple fields (e.g., \"name:desc\" or \"status:asc;createdAt:desc\") 
        :param str filter: Filter by a keyword
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'sort', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generators" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_training_progress(self, generator_id, **kwargs):  # noqa: E501
        """Read the training progress.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_progress(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: JobProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_training_progress_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_training_progress_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def get_training_progress_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Read the training progress.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_training_progress_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: JobProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_training_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `get_training_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/training', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_training(self, generator_id, **kwargs):  # noqa: E501
        """Starts the training of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_training(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_training_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_training_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def start_training_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Starts the training of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_training_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `start_training`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/training', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_training(self, generator_id, **kwargs):  # noqa: E501
        """Stops the training of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_training(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_training_with_http_info(generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_training_with_http_info(generator_id, **kwargs)  # noqa: E501
            return data

    def stop_training_with_http_info(self, generator_id, **kwargs):  # noqa: E501
        """Stops the training of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_training_with_http_info(generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `stop_training`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}/training', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_generator(self, body, generator_id, **kwargs):  # noqa: E501
        """Updates a generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_generator(body, generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Generator body: (required)
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: Generator
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_generator_with_http_info(body, generator_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_generator_with_http_info(body, generator_id, **kwargs)  # noqa: E501
            return data

    def update_generator_with_http_info(self, body, generator_id, **kwargs):  # noqa: E501
        """Updates a generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_generator_with_http_info(body, generator_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Generator body: (required)
        :param GeneratorId generator_id: The unique identifier of the generator (required)
        :return: Generator
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'generator_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_generator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_generator`")  # noqa: E501
        # verify the required parameter 'generator_id' is set
        if ('generator_id' not in params or
                params['generator_id'] is None):
            raise ValueError("Missing the required parameter `generator_id` when calling `update_generator`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'generator_id' in params:
            path_params['generatorId'] = params['generator_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/generators/{generatorId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Generator',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
