# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QAReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_data_qa_report(self, qa_report_id, **kwargs):  # noqa: E501
        """Downloads a QA report of the trained model as .zip file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_data_qa_report(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_data_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_data_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
            return data

    def download_data_qa_report_with_http_info(self, qa_report_id, **kwargs):  # noqa: E501
        """Downloads a QA report of the trained model as .zip file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_data_qa_report_with_http_info(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qa_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_data_qa_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qa_report_id' is set
        if ('qa_report_id' not in params or
                params['qa_report_id'] is None):
            raise ValueError("Missing the required parameter `qa_report_id` when calling `download_data_qa_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qa_report_id' in params:
            path_params['qaReportId'] = params['qa_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data-qa-report/{qaReportId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_model_qa_report(self, qa_report_id, **kwargs):  # noqa: E501
        """Downloads a QA report of the trained model as .zip file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_model_qa_report(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.download_model_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_model_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
            return data

    def download_model_qa_report_with_http_info(self, qa_report_id, **kwargs):  # noqa: E501
        """Downloads a QA report of the trained model as .zip file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_model_qa_report_with_http_info(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qa_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_model_qa_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qa_report_id' is set
        if ('qa_report_id' not in params or
                params['qa_report_id'] is None):
            raise ValueError("Missing the required parameter `qa_report_id` when calling `download_model_qa_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qa_report_id' in params:
            path_params['qaReportId'] = params['qa_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/model-qa-report/{qaReportId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_qa_report(self, qa_report_id, **kwargs):  # noqa: E501
        """Read a QA report of the trained model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_qa_report(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: DataQAReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
            return data

    def get_data_qa_report_with_http_info(self, qa_report_id, **kwargs):  # noqa: E501
        """Read a QA report of the trained model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_qa_report_with_http_info(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: DataQAReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qa_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_qa_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qa_report_id' is set
        if ('qa_report_id' not in params or
                params['qa_report_id'] is None):
            raise ValueError("Missing the required parameter `qa_report_id` when calling `get_data_qa_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qa_report_id' in params:
            path_params['qaReportId'] = params['qa_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/data-qa-report/{qaReportId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataQAReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_model_qa_report(self, qa_report_id, **kwargs):  # noqa: E501
        """Read a QA report of the trained model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_qa_report(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: ModelQAReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_model_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_model_qa_report_with_http_info(qa_report_id, **kwargs)  # noqa: E501
            return data

    def get_model_qa_report_with_http_info(self, qa_report_id, **kwargs):  # noqa: E501
        """Read a QA report of the trained model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_model_qa_report_with_http_info(qa_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelQAReportId qa_report_id: The unique identifier of the QA report (required)
        :return: ModelQAReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qa_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_qa_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qa_report_id' is set
        if ('qa_report_id' not in params or
                params['qa_report_id'] is None):
            raise ValueError("Missing the required parameter `qa_report_id` when calling `get_model_qa_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'qa_report_id' in params:
            path_params['qaReportId'] = params['qa_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/model-qa-report/{qaReportId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelQAReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
