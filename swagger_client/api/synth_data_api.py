# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SynthDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_synth_data(self, **kwargs):  # noqa: E501
        """Creates a new SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_synth_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticdataBody body:
        :param str copy_from_id: Id of SynthData that should be cloned
        :return: SyntheticData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_synth_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_synth_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_synth_data_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_synth_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticdataBody body:
        :param str copy_from_id: Id of SynthData that should be cloned
        :return: SyntheticData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'copy_from_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_synth_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'copy_from_id' in params:
            query_params.append(('copyFromId', params['copy_from_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyntheticData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_synth_data(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Deletes a SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_synth_data(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_synth_data_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_synth_data_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
            return data

    def delete_synth_data_with_http_info(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Deletes a SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_synth_data_with_http_info(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synthetic_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_synth_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synthetic_data_id' is set
        if ('synthetic_data_id' not in params or
                params['synthetic_data_id'] is None):
            raise ValueError("Missing the required parameter `synthetic_data_id` when calling `delete_synth_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthetic_data_id' in params:
            path_params['syntheticDataId'] = params['synthetic_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data/{syntheticDataId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_synth_data(self, **kwargs):  # noqa: E501
        """List SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_synth_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of items to skip before starting to collect the result set
        :param int size: The numbers of items to return
        :param str sort: Fields and direction used for sorting generators.  Can include multiple fields (e.g., \"name:desc\" or \"status:asc;date:desc\") 
        :param str filter: Filter by a keyword
        :param str generatorid: id of used generator.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_synth_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_synth_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_synth_data_with_http_info(self, **kwargs):  # noqa: E501
        """List SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_synth_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The number of items to skip before starting to collect the result set
        :param int size: The numbers of items to return
        :param str sort: Fields and direction used for sorting generators.  Can include multiple fields (e.g., \"name:desc\" or \"status:asc;date:desc\") 
        :param str filter: Filter by a keyword
        :param str generatorid: id of used generator.
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size', 'sort', 'filter', 'generatorid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synth_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'generatorid' in params:
            query_params.append(('generatorid', params['generatorid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_synth_data_by_id(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Read a SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_synth_data_by_id(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: SyntheticData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_synth_data_by_id_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_synth_data_by_id_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
            return data

    def get_synth_data_by_id_with_http_info(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Read a SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_synth_data_by_id_with_http_info(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: SyntheticData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synthetic_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synth_data_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synthetic_data_id' is set
        if ('synthetic_data_id' not in params or
                params['synthetic_data_id'] is None):
            raise ValueError("Missing the required parameter `synthetic_data_id` when calling `get_synth_data_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthetic_data_id' in params:
            path_params['syntheticDataId'] = params['synthetic_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data/{syntheticDataId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyntheticData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_synth_data_progress(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Read the synthData progress.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_synth_data_progress(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: JobProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_synth_data_progress_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_synth_data_progress_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
            return data

    def get_synth_data_progress_with_http_info(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Read the synthData progress.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_synth_data_progress_with_http_info(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: JobProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synthetic_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synth_data_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synthetic_data_id' is set
        if ('synthetic_data_id' not in params or
                params['synthetic_data_id'] is None):
            raise ValueError("Missing the required parameter `synthetic_data_id` when calling `get_synth_data_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthetic_data_id' in params:
            path_params['syntheticDataId'] = params['synthetic_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data/{syntheticDataId}/generation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_synth_data(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Starts the synthData of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_synth_data(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_synth_data_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_synth_data_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
            return data

    def start_synth_data_with_http_info(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Starts the synthData of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_synth_data_with_http_info(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synthetic_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_synth_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synthetic_data_id' is set
        if ('synthetic_data_id' not in params or
                params['synthetic_data_id'] is None):
            raise ValueError("Missing the required parameter `synthetic_data_id` when calling `start_synth_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthetic_data_id' in params:
            path_params['syntheticDataId'] = params['synthetic_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data/{syntheticDataId}/generation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_synth_data(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Stops the synthData of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_synth_data(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_synth_data_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_synth_data_with_http_info(synthetic_data_id, **kwargs)  # noqa: E501
            return data

    def stop_synth_data_with_http_info(self, synthetic_data_id, **kwargs):  # noqa: E501
        """Stops the synthData of the generator  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_synth_data_with_http_info(synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['synthetic_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_synth_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'synthetic_data_id' is set
        if ('synthetic_data_id' not in params or
                params['synthetic_data_id'] is None):
            raise ValueError("Missing the required parameter `synthetic_data_id` when calling `stop_synth_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthetic_data_id' in params:
            path_params['syntheticDataId'] = params['synthetic_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data/{syntheticDataId}/generation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_synth_data(self, body, synthetic_data_id, **kwargs):  # noqa: E501
        """Updates a SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_synth_data(body, synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticData body: (required)
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: SyntheticData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_synth_data_with_http_info(body, synthetic_data_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_synth_data_with_http_info(body, synthetic_data_id, **kwargs)  # noqa: E501
            return data

    def update_synth_data_with_http_info(self, body, synthetic_data_id, **kwargs):  # noqa: E501
        """Updates a SynthData  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_synth_data_with_http_info(body, synthetic_data_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SyntheticData body: (required)
        :param SyntheticDataId synthetic_data_id: The unique identifier of the synthData (required)
        :return: SyntheticData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'synthetic_data_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_synth_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_synth_data`")  # noqa: E501
        # verify the required parameter 'synthetic_data_id' is set
        if ('synthetic_data_id' not in params or
                params['synthetic_data_id'] is None):
            raise ValueError("Missing the required parameter `synthetic_data_id` when calling `update_synth_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthetic_data_id' in params:
            path_params['syntheticDataId'] = params['synthetic_data_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/synthetic-data/{syntheticDataId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyntheticData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
