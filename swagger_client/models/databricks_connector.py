# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_connector import BaseConnector  # noqa: F401,E501

class DatabricksConnector(BaseConnector):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'Hostname',
        'http_path': 'str',
        'access_token': 'str',
        'catalog': 'str',
        'schema': 'str'
    }
    if hasattr(BaseConnector, "swagger_types"):
        swagger_types.update(BaseConnector.swagger_types)

    attribute_map = {
        'hostname': 'hostname',
        'http_path': 'httpPath',
        'access_token': 'accessToken',
        'catalog': 'catalog',
        'schema': 'schema'
    }
    if hasattr(BaseConnector, "attribute_map"):
        attribute_map.update(BaseConnector.attribute_map)

    def __init__(self, hostname=None, http_path=None, access_token=None, catalog=None, schema=None, *args, **kwargs):  # noqa: E501
        """DatabricksConnector - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._http_path = None
        self._access_token = None
        self._catalog = None
        self._schema = None
        self.discriminator = None
        self.hostname = hostname
        self.http_path = http_path
        self.access_token = access_token
        self.catalog = catalog
        if schema is not None:
            self.schema = schema
        BaseConnector.__init__(self, *args, **kwargs)

    @property
    def hostname(self):
        """Gets the hostname of this DatabricksConnector.  # noqa: E501


        :return: The hostname of this DatabricksConnector.  # noqa: E501
        :rtype: Hostname
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DatabricksConnector.


        :param hostname: The hostname of this DatabricksConnector.  # noqa: E501
        :type: Hostname
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def http_path(self):
        """Gets the http_path of this DatabricksConnector.  # noqa: E501


        :return: The http_path of this DatabricksConnector.  # noqa: E501
        :rtype: str
        """
        return self._http_path

    @http_path.setter
    def http_path(self, http_path):
        """Sets the http_path of this DatabricksConnector.


        :param http_path: The http_path of this DatabricksConnector.  # noqa: E501
        :type: str
        """
        if http_path is None:
            raise ValueError("Invalid value for `http_path`, must not be `None`")  # noqa: E501

        self._http_path = http_path

    @property
    def access_token(self):
        """Gets the access_token of this DatabricksConnector.  # noqa: E501


        :return: The access_token of this DatabricksConnector.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this DatabricksConnector.


        :param access_token: The access_token of this DatabricksConnector.  # noqa: E501
        :type: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def catalog(self):
        """Gets the catalog of this DatabricksConnector.  # noqa: E501


        :return: The catalog of this DatabricksConnector.  # noqa: E501
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this DatabricksConnector.


        :param catalog: The catalog of this DatabricksConnector.  # noqa: E501
        :type: str
        """
        if catalog is None:
            raise ValueError("Invalid value for `catalog`, must not be `None`")  # noqa: E501

        self._catalog = catalog

    @property
    def schema(self):
        """Gets the schema of this DatabricksConnector.  # noqa: E501


        :return: The schema of this DatabricksConnector.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this DatabricksConnector.


        :param schema: The schema of this DatabricksConnector.  # noqa: E501
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatabricksConnector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabricksConnector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
