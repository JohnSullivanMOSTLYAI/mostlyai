# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_delivery import BaseDelivery  # noqa: F401,E501

class Delivery(BaseDelivery):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'synthetic_dataset_id': 'SyntheticDataId',
        'drop_tables': 'bool'
    }
    if hasattr(BaseDelivery, "swagger_types"):
        swagger_types.update(BaseDelivery.swagger_types)

    attribute_map = {
        'synthetic_dataset_id': 'syntheticDatasetId',
        'drop_tables': 'dropTables'
    }
    if hasattr(BaseDelivery, "attribute_map"):
        attribute_map.update(BaseDelivery.attribute_map)

    def __init__(self, synthetic_dataset_id=None, drop_tables=None, *args, **kwargs):  # noqa: E501
        """Delivery - a model defined in Swagger"""  # noqa: E501
        self._synthetic_dataset_id = None
        self._drop_tables = None
        self.discriminator = None
        if synthetic_dataset_id is not None:
            self.synthetic_dataset_id = synthetic_dataset_id
        if drop_tables is not None:
            self.drop_tables = drop_tables
        BaseDelivery.__init__(self, *args, **kwargs)

    @property
    def synthetic_dataset_id(self):
        """Gets the synthetic_dataset_id of this Delivery.  # noqa: E501


        :return: The synthetic_dataset_id of this Delivery.  # noqa: E501
        :rtype: SyntheticDataId
        """
        return self._synthetic_dataset_id

    @synthetic_dataset_id.setter
    def synthetic_dataset_id(self, synthetic_dataset_id):
        """Sets the synthetic_dataset_id of this Delivery.


        :param synthetic_dataset_id: The synthetic_dataset_id of this Delivery.  # noqa: E501
        :type: SyntheticDataId
        """

        self._synthetic_dataset_id = synthetic_dataset_id

    @property
    def drop_tables(self):
        """Gets the drop_tables of this Delivery.  # noqa: E501


        :return: The drop_tables of this Delivery.  # noqa: E501
        :rtype: bool
        """
        return self._drop_tables

    @drop_tables.setter
    def drop_tables(self, drop_tables):
        """Sets the drop_tables of this Delivery.


        :param drop_tables: The drop_tables of this Delivery.  # noqa: E501
        :type: bool
        """

        self._drop_tables = drop_tables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Delivery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Delivery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
