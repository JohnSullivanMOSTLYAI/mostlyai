# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelQAReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'ModelQAReportId',
        'summary': 'QASummary',
        'display_name': 'str',
        'generation_method': 'str',
        'correlations': 'Figures',
        'accuracy': 'QAReportAccuracy',
        'privacy': 'QAReportPrivacy',
        'univariate_distributions': 'Figures',
        'bivariate_distributions': 'Figures',
        'privacy_distributions': 'Figures',
        'qa_report_table_details': 'QAReportTableDetails'
    }

    attribute_map = {
        'id': 'id',
        'summary': 'summary',
        'display_name': 'displayName',
        'generation_method': 'generationMethod',
        'correlations': 'correlations',
        'accuracy': 'accuracy',
        'privacy': 'privacy',
        'univariate_distributions': 'univariateDistributions',
        'bivariate_distributions': 'bivariateDistributions',
        'privacy_distributions': 'privacyDistributions',
        'qa_report_table_details': 'QAReportTableDetails'
    }

    def __init__(self, id=None, summary=None, display_name=None, generation_method=None, correlations=None, accuracy=None, privacy=None, univariate_distributions=None, bivariate_distributions=None, privacy_distributions=None, qa_report_table_details=None):  # noqa: E501
        """ModelQAReport - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._summary = None
        self._display_name = None
        self._generation_method = None
        self._correlations = None
        self._accuracy = None
        self._privacy = None
        self._univariate_distributions = None
        self._bivariate_distributions = None
        self._privacy_distributions = None
        self._qa_report_table_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if summary is not None:
            self.summary = summary
        if display_name is not None:
            self.display_name = display_name
        if generation_method is not None:
            self.generation_method = generation_method
        if correlations is not None:
            self.correlations = correlations
        if accuracy is not None:
            self.accuracy = accuracy
        if privacy is not None:
            self.privacy = privacy
        if univariate_distributions is not None:
            self.univariate_distributions = univariate_distributions
        if bivariate_distributions is not None:
            self.bivariate_distributions = bivariate_distributions
        if privacy_distributions is not None:
            self.privacy_distributions = privacy_distributions
        if qa_report_table_details is not None:
            self.qa_report_table_details = qa_report_table_details

    @property
    def id(self):
        """Gets the id of this ModelQAReport.  # noqa: E501


        :return: The id of this ModelQAReport.  # noqa: E501
        :rtype: ModelQAReportId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelQAReport.


        :param id: The id of this ModelQAReport.  # noqa: E501
        :type: ModelQAReportId
        """

        self._id = id

    @property
    def summary(self):
        """Gets the summary of this ModelQAReport.  # noqa: E501


        :return: The summary of this ModelQAReport.  # noqa: E501
        :rtype: QASummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ModelQAReport.


        :param summary: The summary of this ModelQAReport.  # noqa: E501
        :type: QASummary
        """

        self._summary = summary

    @property
    def display_name(self):
        """Gets the display_name of this ModelQAReport.  # noqa: E501


        :return: The display_name of this ModelQAReport.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelQAReport.


        :param display_name: The display_name of this ModelQAReport.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def generation_method(self):
        """Gets the generation_method of this ModelQAReport.  # noqa: E501


        :return: The generation_method of this ModelQAReport.  # noqa: E501
        :rtype: str
        """
        return self._generation_method

    @generation_method.setter
    def generation_method(self, generation_method):
        """Sets the generation_method of this ModelQAReport.


        :param generation_method: The generation_method of this ModelQAReport.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUBJECT", "LINKED", "REFERENCE", "EXCLUDE", "UNDEFINED"]  # noqa: E501
        if generation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `generation_method` ({0}), must be one of {1}"  # noqa: E501
                .format(generation_method, allowed_values)
            )

        self._generation_method = generation_method

    @property
    def correlations(self):
        """Gets the correlations of this ModelQAReport.  # noqa: E501


        :return: The correlations of this ModelQAReport.  # noqa: E501
        :rtype: Figures
        """
        return self._correlations

    @correlations.setter
    def correlations(self, correlations):
        """Sets the correlations of this ModelQAReport.


        :param correlations: The correlations of this ModelQAReport.  # noqa: E501
        :type: Figures
        """

        self._correlations = correlations

    @property
    def accuracy(self):
        """Gets the accuracy of this ModelQAReport.  # noqa: E501


        :return: The accuracy of this ModelQAReport.  # noqa: E501
        :rtype: QAReportAccuracy
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this ModelQAReport.


        :param accuracy: The accuracy of this ModelQAReport.  # noqa: E501
        :type: QAReportAccuracy
        """

        self._accuracy = accuracy

    @property
    def privacy(self):
        """Gets the privacy of this ModelQAReport.  # noqa: E501


        :return: The privacy of this ModelQAReport.  # noqa: E501
        :rtype: QAReportPrivacy
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ModelQAReport.


        :param privacy: The privacy of this ModelQAReport.  # noqa: E501
        :type: QAReportPrivacy
        """

        self._privacy = privacy

    @property
    def univariate_distributions(self):
        """Gets the univariate_distributions of this ModelQAReport.  # noqa: E501


        :return: The univariate_distributions of this ModelQAReport.  # noqa: E501
        :rtype: Figures
        """
        return self._univariate_distributions

    @univariate_distributions.setter
    def univariate_distributions(self, univariate_distributions):
        """Sets the univariate_distributions of this ModelQAReport.


        :param univariate_distributions: The univariate_distributions of this ModelQAReport.  # noqa: E501
        :type: Figures
        """

        self._univariate_distributions = univariate_distributions

    @property
    def bivariate_distributions(self):
        """Gets the bivariate_distributions of this ModelQAReport.  # noqa: E501


        :return: The bivariate_distributions of this ModelQAReport.  # noqa: E501
        :rtype: Figures
        """
        return self._bivariate_distributions

    @bivariate_distributions.setter
    def bivariate_distributions(self, bivariate_distributions):
        """Sets the bivariate_distributions of this ModelQAReport.


        :param bivariate_distributions: The bivariate_distributions of this ModelQAReport.  # noqa: E501
        :type: Figures
        """

        self._bivariate_distributions = bivariate_distributions

    @property
    def privacy_distributions(self):
        """Gets the privacy_distributions of this ModelQAReport.  # noqa: E501


        :return: The privacy_distributions of this ModelQAReport.  # noqa: E501
        :rtype: Figures
        """
        return self._privacy_distributions

    @privacy_distributions.setter
    def privacy_distributions(self, privacy_distributions):
        """Sets the privacy_distributions of this ModelQAReport.


        :param privacy_distributions: The privacy_distributions of this ModelQAReport.  # noqa: E501
        :type: Figures
        """

        self._privacy_distributions = privacy_distributions

    @property
    def qa_report_table_details(self):
        """Gets the qa_report_table_details of this ModelQAReport.  # noqa: E501


        :return: The qa_report_table_details of this ModelQAReport.  # noqa: E501
        :rtype: QAReportTableDetails
        """
        return self._qa_report_table_details

    @qa_report_table_details.setter
    def qa_report_table_details(self, qa_report_table_details):
        """Sets the qa_report_table_details of this ModelQAReport.


        :param qa_report_table_details: The qa_report_table_details of this ModelQAReport.  # noqa: E501
        :type: QAReportTableDetails
        """

        self._qa_report_table_details = qa_report_table_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelQAReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelQAReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
