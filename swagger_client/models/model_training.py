# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelTraining(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'ModelTrainingId',
        'model_type': 'str',
        'max_sample_size': 'int',
        'batch_size': 'int',
        'model_size': 'str',
        'max_epochs': 'int',
        'max_sequence_length': 'int',
        'goal': 'str',
        'enable_flexible_generation': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'model_type': 'modelType',
        'max_sample_size': 'maxSampleSize',
        'batch_size': 'batchSize',
        'model_size': 'modelSize',
        'max_epochs': 'maxEpochs',
        'max_sequence_length': 'maxSequenceLength',
        'goal': 'goal',
        'enable_flexible_generation': 'enableFlexibleGeneration'
    }

    def __init__(self, id=None, model_type=None, max_sample_size=None, batch_size=None, model_size=None, max_epochs=None, max_sequence_length=None, goal=None, enable_flexible_generation=None):  # noqa: E501
        """ModelTraining - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model_type = None
        self._max_sample_size = None
        self._batch_size = None
        self._model_size = None
        self._max_epochs = None
        self._max_sequence_length = None
        self._goal = None
        self._enable_flexible_generation = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if model_type is not None:
            self.model_type = model_type
        if max_sample_size is not None:
            self.max_sample_size = max_sample_size
        if batch_size is not None:
            self.batch_size = batch_size
        if model_size is not None:
            self.model_size = model_size
        if max_epochs is not None:
            self.max_epochs = max_epochs
        if max_sequence_length is not None:
            self.max_sequence_length = max_sequence_length
        if goal is not None:
            self.goal = goal
        if enable_flexible_generation is not None:
            self.enable_flexible_generation = enable_flexible_generation

    @property
    def id(self):
        """Gets the id of this ModelTraining.  # noqa: E501


        :return: The id of this ModelTraining.  # noqa: E501
        :rtype: ModelTrainingId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelTraining.


        :param id: The id of this ModelTraining.  # noqa: E501
        :type: ModelTrainingId
        """

        self._id = id

    @property
    def model_type(self):
        """Gets the model_type of this ModelTraining.  # noqa: E501


        :return: The model_type of this ModelTraining.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ModelTraining.


        :param model_type: The model_type of this ModelTraining.  # noqa: E501
        :type: str
        """
        allowed_values = ["flat", "sequence", "text"]  # noqa: E501
        if model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `model_type` ({0}), must be one of {1}"  # noqa: E501
                .format(model_type, allowed_values)
            )

        self._model_type = model_type

    @property
    def max_sample_size(self):
        """Gets the max_sample_size of this ModelTraining.  # noqa: E501


        :return: The max_sample_size of this ModelTraining.  # noqa: E501
        :rtype: int
        """
        return self._max_sample_size

    @max_sample_size.setter
    def max_sample_size(self, max_sample_size):
        """Sets the max_sample_size of this ModelTraining.


        :param max_sample_size: The max_sample_size of this ModelTraining.  # noqa: E501
        :type: int
        """

        self._max_sample_size = max_sample_size

    @property
    def batch_size(self):
        """Gets the batch_size of this ModelTraining.  # noqa: E501

        If not provided, batchSize will be chosen automatically.   # noqa: E501

        :return: The batch_size of this ModelTraining.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this ModelTraining.

        If not provided, batchSize will be chosen automatically.   # noqa: E501

        :param batch_size: The batch_size of this ModelTraining.  # noqa: E501
        :type: int
        """

        self._batch_size = batch_size

    @property
    def model_size(self):
        """Gets the model_size of this ModelTraining.  # noqa: E501


        :return: The model_size of this ModelTraining.  # noqa: E501
        :rtype: str
        """
        return self._model_size

    @model_size.setter
    def model_size(self, model_size):
        """Sets the model_size of this ModelTraining.


        :param model_size: The model_size of this ModelTraining.  # noqa: E501
        :type: str
        """
        allowed_values = ["S", "M", "L"]  # noqa: E501
        if model_size not in allowed_values:
            raise ValueError(
                "Invalid value for `model_size` ({0}), must be one of {1}"  # noqa: E501
                .format(model_size, allowed_values)
            )

        self._model_size = model_size

    @property
    def max_epochs(self):
        """Gets the max_epochs of this ModelTraining.  # noqa: E501


        :return: The max_epochs of this ModelTraining.  # noqa: E501
        :rtype: int
        """
        return self._max_epochs

    @max_epochs.setter
    def max_epochs(self, max_epochs):
        """Sets the max_epochs of this ModelTraining.


        :param max_epochs: The max_epochs of this ModelTraining.  # noqa: E501
        :type: int
        """

        self._max_epochs = max_epochs

    @property
    def max_sequence_length(self):
        """Gets the max_sequence_length of this ModelTraining.  # noqa: E501


        :return: The max_sequence_length of this ModelTraining.  # noqa: E501
        :rtype: int
        """
        return self._max_sequence_length

    @max_sequence_length.setter
    def max_sequence_length(self, max_sequence_length):
        """Sets the max_sequence_length of this ModelTraining.


        :param max_sequence_length: The max_sequence_length of this ModelTraining.  # noqa: E501
        :type: int
        """

        self._max_sequence_length = max_sequence_length

    @property
    def goal(self):
        """Gets the goal of this ModelTraining.  # noqa: E501


        :return: The goal of this ModelTraining.  # noqa: E501
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this ModelTraining.


        :param goal: The goal of this ModelTraining.  # noqa: E501
        :type: str
        """
        allowed_values = ["turbo", "speed", "accuracy"]  # noqa: E501
        if goal not in allowed_values:
            raise ValueError(
                "Invalid value for `goal` ({0}), must be one of {1}"  # noqa: E501
                .format(goal, allowed_values)
            )

        self._goal = goal

    @property
    def enable_flexible_generation(self):
        """Gets the enable_flexible_generation of this ModelTraining.  # noqa: E501


        :return: The enable_flexible_generation of this ModelTraining.  # noqa: E501
        :rtype: bool
        """
        return self._enable_flexible_generation

    @enable_flexible_generation.setter
    def enable_flexible_generation(self, enable_flexible_generation):
        """Sets the enable_flexible_generation of this ModelTraining.


        :param enable_flexible_generation: The enable_flexible_generation of this ModelTraining.  # noqa: E501
        :type: bool
        """

        self._enable_flexible_generation = enable_flexible_generation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelTraining, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelTraining):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
