# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_connector import BaseConnector  # noqa: F401,E501

class OracleConnector(BaseConnector):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'Hostname',
        'port': 'str',
        'sid_connection_type': 'str',
        'username': 'str',
        'password': 'str',
        'database': 'str',
        'schema': 'str'
    }
    if hasattr(BaseConnector, "swagger_types"):
        swagger_types.update(BaseConnector.swagger_types)

    attribute_map = {
        'hostname': 'hostname',
        'port': 'port',
        'sid_connection_type': 'sidConnectionType',
        'username': 'username',
        'password': 'password',
        'database': 'database',
        'schema': 'schema'
    }
    if hasattr(BaseConnector, "attribute_map"):
        attribute_map.update(BaseConnector.attribute_map)

    def __init__(self, hostname=None, port=None, sid_connection_type=None, username=None, password=None, database=None, schema=None, *args, **kwargs):  # noqa: E501
        """OracleConnector - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._port = None
        self._sid_connection_type = None
        self._username = None
        self._password = None
        self._database = None
        self._schema = None
        self.discriminator = None
        self.hostname = hostname
        self.port = port
        self.sid_connection_type = sid_connection_type
        self.username = username
        self.password = password
        self.database = database
        self.schema = schema
        BaseConnector.__init__(self, *args, **kwargs)

    @property
    def hostname(self):
        """Gets the hostname of this OracleConnector.  # noqa: E501


        :return: The hostname of this OracleConnector.  # noqa: E501
        :rtype: Hostname
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OracleConnector.


        :param hostname: The hostname of this OracleConnector.  # noqa: E501
        :type: Hostname
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this OracleConnector.  # noqa: E501


        :return: The port of this OracleConnector.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OracleConnector.


        :param port: The port of this OracleConnector.  # noqa: E501
        :type: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def sid_connection_type(self):
        """Gets the sid_connection_type of this OracleConnector.  # noqa: E501


        :return: The sid_connection_type of this OracleConnector.  # noqa: E501
        :rtype: str
        """
        return self._sid_connection_type

    @sid_connection_type.setter
    def sid_connection_type(self, sid_connection_type):
        """Sets the sid_connection_type of this OracleConnector.


        :param sid_connection_type: The sid_connection_type of this OracleConnector.  # noqa: E501
        :type: str
        """
        if sid_connection_type is None:
            raise ValueError("Invalid value for `sid_connection_type`, must not be `None`")  # noqa: E501
        allowed_values = ["database", "sid", "service_name"]  # noqa: E501
        if sid_connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sid_connection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sid_connection_type, allowed_values)
            )

        self._sid_connection_type = sid_connection_type

    @property
    def username(self):
        """Gets the username of this OracleConnector.  # noqa: E501


        :return: The username of this OracleConnector.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OracleConnector.


        :param username: The username of this OracleConnector.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this OracleConnector.  # noqa: E501


        :return: The password of this OracleConnector.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OracleConnector.


        :param password: The password of this OracleConnector.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def database(self):
        """Gets the database of this OracleConnector.  # noqa: E501


        :return: The database of this OracleConnector.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this OracleConnector.


        :param database: The database of this OracleConnector.  # noqa: E501
        :type: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")  # noqa: E501

        self._database = database

    @property
    def schema(self):
        """Gets the schema of this OracleConnector.  # noqa: E501


        :return: The schema of this OracleConnector.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this OracleConnector.


        :param schema: The schema of this OracleConnector.  # noqa: E501
        :type: str
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OracleConnector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OracleConnector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
