# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.base_connector import BaseConnector  # noqa: F401,E501

class PostgresSqlConnector(BaseConnector):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hostname': 'Hostname',
        'port': 'str',
        'username': 'str',
        'password': 'str',
        'database': 'str',
        'schema': 'str',
        'use_ssl': 'bool',
        'ssl_settings': 'SslSettings'
    }
    if hasattr(BaseConnector, "swagger_types"):
        swagger_types.update(BaseConnector.swagger_types)

    attribute_map = {
        'hostname': 'hostname',
        'port': 'port',
        'username': 'username',
        'password': 'password',
        'database': 'database',
        'schema': 'schema',
        'use_ssl': 'useSsl',
        'ssl_settings': 'sslSettings'
    }
    if hasattr(BaseConnector, "attribute_map"):
        attribute_map.update(BaseConnector.attribute_map)

    def __init__(self, hostname=None, port=None, username=None, password=None, database=None, schema=None, use_ssl=None, ssl_settings=None, *args, **kwargs):  # noqa: E501
        """PostgresSqlConnector - a model defined in Swagger"""  # noqa: E501
        self._hostname = None
        self._port = None
        self._username = None
        self._password = None
        self._database = None
        self._schema = None
        self._use_ssl = None
        self._ssl_settings = None
        self.discriminator = None
        self.hostname = hostname
        self.port = port
        self.username = username
        self.password = password
        self.database = database
        self.schema = schema
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if ssl_settings is not None:
            self.ssl_settings = ssl_settings
        BaseConnector.__init__(self, *args, **kwargs)

    @property
    def hostname(self):
        """Gets the hostname of this PostgresSqlConnector.  # noqa: E501


        :return: The hostname of this PostgresSqlConnector.  # noqa: E501
        :rtype: Hostname
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this PostgresSqlConnector.


        :param hostname: The hostname of this PostgresSqlConnector.  # noqa: E501
        :type: Hostname
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this PostgresSqlConnector.  # noqa: E501


        :return: The port of this PostgresSqlConnector.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this PostgresSqlConnector.


        :param port: The port of this PostgresSqlConnector.  # noqa: E501
        :type: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def username(self):
        """Gets the username of this PostgresSqlConnector.  # noqa: E501


        :return: The username of this PostgresSqlConnector.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PostgresSqlConnector.


        :param username: The username of this PostgresSqlConnector.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this PostgresSqlConnector.  # noqa: E501


        :return: The password of this PostgresSqlConnector.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PostgresSqlConnector.


        :param password: The password of this PostgresSqlConnector.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def database(self):
        """Gets the database of this PostgresSqlConnector.  # noqa: E501


        :return: The database of this PostgresSqlConnector.  # noqa: E501
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this PostgresSqlConnector.


        :param database: The database of this PostgresSqlConnector.  # noqa: E501
        :type: str
        """
        if database is None:
            raise ValueError("Invalid value for `database`, must not be `None`")  # noqa: E501

        self._database = database

    @property
    def schema(self):
        """Gets the schema of this PostgresSqlConnector.  # noqa: E501


        :return: The schema of this PostgresSqlConnector.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this PostgresSqlConnector.


        :param schema: The schema of this PostgresSqlConnector.  # noqa: E501
        :type: str
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def use_ssl(self):
        """Gets the use_ssl of this PostgresSqlConnector.  # noqa: E501


        :return: The use_ssl of this PostgresSqlConnector.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this PostgresSqlConnector.


        :param use_ssl: The use_ssl of this PostgresSqlConnector.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    @property
    def ssl_settings(self):
        """Gets the ssl_settings of this PostgresSqlConnector.  # noqa: E501


        :return: The ssl_settings of this PostgresSqlConnector.  # noqa: E501
        :rtype: SslSettings
        """
        return self._ssl_settings

    @ssl_settings.setter
    def ssl_settings(self, ssl_settings):
        """Sets the ssl_settings of this PostgresSqlConnector.


        :param ssl_settings: The ssl_settings of this PostgresSqlConnector.  # noqa: E501
        :type: SslSettings
        """

        self._ssl_settings = ssl_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostgresSqlConnector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostgresSqlConnector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
