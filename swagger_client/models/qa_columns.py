# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QAColumns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'overall': 'int',
        'numeric': 'int',
        'categorical': 'int',
        'date_time': 'int',
        'context': 'int'
    }

    attribute_map = {
        'overall': 'overall',
        'numeric': 'numeric',
        'categorical': 'categorical',
        'date_time': 'dateTime',
        'context': 'context'
    }

    def __init__(self, overall=None, numeric=None, categorical=None, date_time=None, context=None):  # noqa: E501
        """QAColumns - a model defined in Swagger"""  # noqa: E501
        self._overall = None
        self._numeric = None
        self._categorical = None
        self._date_time = None
        self._context = None
        self.discriminator = None
        if overall is not None:
            self.overall = overall
        if numeric is not None:
            self.numeric = numeric
        if categorical is not None:
            self.categorical = categorical
        if date_time is not None:
            self.date_time = date_time
        if context is not None:
            self.context = context

    @property
    def overall(self):
        """Gets the overall of this QAColumns.  # noqa: E501


        :return: The overall of this QAColumns.  # noqa: E501
        :rtype: int
        """
        return self._overall

    @overall.setter
    def overall(self, overall):
        """Sets the overall of this QAColumns.


        :param overall: The overall of this QAColumns.  # noqa: E501
        :type: int
        """

        self._overall = overall

    @property
    def numeric(self):
        """Gets the numeric of this QAColumns.  # noqa: E501


        :return: The numeric of this QAColumns.  # noqa: E501
        :rtype: int
        """
        return self._numeric

    @numeric.setter
    def numeric(self, numeric):
        """Sets the numeric of this QAColumns.


        :param numeric: The numeric of this QAColumns.  # noqa: E501
        :type: int
        """

        self._numeric = numeric

    @property
    def categorical(self):
        """Gets the categorical of this QAColumns.  # noqa: E501


        :return: The categorical of this QAColumns.  # noqa: E501
        :rtype: int
        """
        return self._categorical

    @categorical.setter
    def categorical(self, categorical):
        """Sets the categorical of this QAColumns.


        :param categorical: The categorical of this QAColumns.  # noqa: E501
        :type: int
        """

        self._categorical = categorical

    @property
    def date_time(self):
        """Gets the date_time of this QAColumns.  # noqa: E501


        :return: The date_time of this QAColumns.  # noqa: E501
        :rtype: int
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this QAColumns.


        :param date_time: The date_time of this QAColumns.  # noqa: E501
        :type: int
        """

        self._date_time = date_time

    @property
    def context(self):
        """Gets the context of this QAColumns.  # noqa: E501


        :return: The context of this QAColumns.  # noqa: E501
        :rtype: int
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this QAColumns.


        :param context: The context of this QAColumns.  # noqa: E501
        :type: int
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QAColumns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QAColumns):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
