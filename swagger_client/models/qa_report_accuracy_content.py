# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QAReportAccuracyContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_name': 'str',
        'univariate': 'float',
        'univariate_max': 'float',
        'bivariate': 'float',
        'bivariate_max': 'float',
        'coherence': 'float',
        'coherence_max': 'float'
    }

    attribute_map = {
        'column_name': 'columnName',
        'univariate': 'univariate',
        'univariate_max': 'univariateMax',
        'bivariate': 'bivariate',
        'bivariate_max': 'bivariateMax',
        'coherence': 'coherence',
        'coherence_max': 'coherenceMax'
    }

    def __init__(self, column_name=None, univariate=None, univariate_max=None, bivariate=None, bivariate_max=None, coherence=None, coherence_max=None):  # noqa: E501
        """QAReportAccuracyContent - a model defined in Swagger"""  # noqa: E501
        self._column_name = None
        self._univariate = None
        self._univariate_max = None
        self._bivariate = None
        self._bivariate_max = None
        self._coherence = None
        self._coherence_max = None
        self.discriminator = None
        if column_name is not None:
            self.column_name = column_name
        if univariate is not None:
            self.univariate = univariate
        if univariate_max is not None:
            self.univariate_max = univariate_max
        if bivariate is not None:
            self.bivariate = bivariate
        if bivariate_max is not None:
            self.bivariate_max = bivariate_max
        if coherence is not None:
            self.coherence = coherence
        if coherence_max is not None:
            self.coherence_max = coherence_max

    @property
    def column_name(self):
        """Gets the column_name of this QAReportAccuracyContent.  # noqa: E501


        :return: The column_name of this QAReportAccuracyContent.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this QAReportAccuracyContent.


        :param column_name: The column_name of this QAReportAccuracyContent.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def univariate(self):
        """Gets the univariate of this QAReportAccuracyContent.  # noqa: E501


        :return: The univariate of this QAReportAccuracyContent.  # noqa: E501
        :rtype: float
        """
        return self._univariate

    @univariate.setter
    def univariate(self, univariate):
        """Sets the univariate of this QAReportAccuracyContent.


        :param univariate: The univariate of this QAReportAccuracyContent.  # noqa: E501
        :type: float
        """

        self._univariate = univariate

    @property
    def univariate_max(self):
        """Gets the univariate_max of this QAReportAccuracyContent.  # noqa: E501


        :return: The univariate_max of this QAReportAccuracyContent.  # noqa: E501
        :rtype: float
        """
        return self._univariate_max

    @univariate_max.setter
    def univariate_max(self, univariate_max):
        """Sets the univariate_max of this QAReportAccuracyContent.


        :param univariate_max: The univariate_max of this QAReportAccuracyContent.  # noqa: E501
        :type: float
        """

        self._univariate_max = univariate_max

    @property
    def bivariate(self):
        """Gets the bivariate of this QAReportAccuracyContent.  # noqa: E501


        :return: The bivariate of this QAReportAccuracyContent.  # noqa: E501
        :rtype: float
        """
        return self._bivariate

    @bivariate.setter
    def bivariate(self, bivariate):
        """Sets the bivariate of this QAReportAccuracyContent.


        :param bivariate: The bivariate of this QAReportAccuracyContent.  # noqa: E501
        :type: float
        """

        self._bivariate = bivariate

    @property
    def bivariate_max(self):
        """Gets the bivariate_max of this QAReportAccuracyContent.  # noqa: E501


        :return: The bivariate_max of this QAReportAccuracyContent.  # noqa: E501
        :rtype: float
        """
        return self._bivariate_max

    @bivariate_max.setter
    def bivariate_max(self, bivariate_max):
        """Sets the bivariate_max of this QAReportAccuracyContent.


        :param bivariate_max: The bivariate_max of this QAReportAccuracyContent.  # noqa: E501
        :type: float
        """

        self._bivariate_max = bivariate_max

    @property
    def coherence(self):
        """Gets the coherence of this QAReportAccuracyContent.  # noqa: E501


        :return: The coherence of this QAReportAccuracyContent.  # noqa: E501
        :rtype: float
        """
        return self._coherence

    @coherence.setter
    def coherence(self, coherence):
        """Sets the coherence of this QAReportAccuracyContent.


        :param coherence: The coherence of this QAReportAccuracyContent.  # noqa: E501
        :type: float
        """

        self._coherence = coherence

    @property
    def coherence_max(self):
        """Gets the coherence_max of this QAReportAccuracyContent.  # noqa: E501


        :return: The coherence_max of this QAReportAccuracyContent.  # noqa: E501
        :rtype: float
        """
        return self._coherence_max

    @coherence_max.setter
    def coherence_max(self, coherence_max):
        """Sets the coherence_max of this QAReportAccuracyContent.


        :param coherence_max: The coherence_max of this QAReportAccuracyContent.  # noqa: E501
        :type: float
        """

        self._coherence_max = coherence_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QAReportAccuracyContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QAReportAccuracyContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
