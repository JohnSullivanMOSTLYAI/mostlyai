# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QAReportPrivacy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identical_match_share': 'QAReportPrivacyIdenticalMatchShare',
        'distance_to_closest_record': 'QAReportPrivacyDistanceToClosestRecord',
        'nearest_neighbor_distance_ratio': 'QAReportPrivacyDistanceToClosestRecord'
    }

    attribute_map = {
        'identical_match_share': 'identicalMatchShare',
        'distance_to_closest_record': 'distanceToClosestRecord',
        'nearest_neighbor_distance_ratio': 'nearestNeighborDistanceRatio'
    }

    def __init__(self, identical_match_share=None, distance_to_closest_record=None, nearest_neighbor_distance_ratio=None):  # noqa: E501
        """QAReportPrivacy - a model defined in Swagger"""  # noqa: E501
        self._identical_match_share = None
        self._distance_to_closest_record = None
        self._nearest_neighbor_distance_ratio = None
        self.discriminator = None
        if identical_match_share is not None:
            self.identical_match_share = identical_match_share
        if distance_to_closest_record is not None:
            self.distance_to_closest_record = distance_to_closest_record
        if nearest_neighbor_distance_ratio is not None:
            self.nearest_neighbor_distance_ratio = nearest_neighbor_distance_ratio

    @property
    def identical_match_share(self):
        """Gets the identical_match_share of this QAReportPrivacy.  # noqa: E501


        :return: The identical_match_share of this QAReportPrivacy.  # noqa: E501
        :rtype: QAReportPrivacyIdenticalMatchShare
        """
        return self._identical_match_share

    @identical_match_share.setter
    def identical_match_share(self, identical_match_share):
        """Sets the identical_match_share of this QAReportPrivacy.


        :param identical_match_share: The identical_match_share of this QAReportPrivacy.  # noqa: E501
        :type: QAReportPrivacyIdenticalMatchShare
        """

        self._identical_match_share = identical_match_share

    @property
    def distance_to_closest_record(self):
        """Gets the distance_to_closest_record of this QAReportPrivacy.  # noqa: E501


        :return: The distance_to_closest_record of this QAReportPrivacy.  # noqa: E501
        :rtype: QAReportPrivacyDistanceToClosestRecord
        """
        return self._distance_to_closest_record

    @distance_to_closest_record.setter
    def distance_to_closest_record(self, distance_to_closest_record):
        """Sets the distance_to_closest_record of this QAReportPrivacy.


        :param distance_to_closest_record: The distance_to_closest_record of this QAReportPrivacy.  # noqa: E501
        :type: QAReportPrivacyDistanceToClosestRecord
        """

        self._distance_to_closest_record = distance_to_closest_record

    @property
    def nearest_neighbor_distance_ratio(self):
        """Gets the nearest_neighbor_distance_ratio of this QAReportPrivacy.  # noqa: E501


        :return: The nearest_neighbor_distance_ratio of this QAReportPrivacy.  # noqa: E501
        :rtype: QAReportPrivacyDistanceToClosestRecord
        """
        return self._nearest_neighbor_distance_ratio

    @nearest_neighbor_distance_ratio.setter
    def nearest_neighbor_distance_ratio(self, nearest_neighbor_distance_ratio):
        """Sets the nearest_neighbor_distance_ratio of this QAReportPrivacy.


        :param nearest_neighbor_distance_ratio: The nearest_neighbor_distance_ratio of this QAReportPrivacy.  # noqa: E501
        :type: QAReportPrivacyDistanceToClosestRecord
        """

        self._nearest_neighbor_distance_ratio = nearest_neighbor_distance_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QAReportPrivacy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QAReportPrivacy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
