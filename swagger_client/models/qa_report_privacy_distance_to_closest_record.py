# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QAReportPrivacyDistanceToClosestRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'percentile': 'float',
        'training': 'float',
        'synthetic': 'float'
    }

    attribute_map = {
        'percentile': 'percentile',
        'training': 'training',
        'synthetic': 'synthetic'
    }

    def __init__(self, percentile=None, training=None, synthetic=None):  # noqa: E501
        """QAReportPrivacyDistanceToClosestRecord - a model defined in Swagger"""  # noqa: E501
        self._percentile = None
        self._training = None
        self._synthetic = None
        self.discriminator = None
        if percentile is not None:
            self.percentile = percentile
        if training is not None:
            self.training = training
        if synthetic is not None:
            self.synthetic = synthetic

    @property
    def percentile(self):
        """Gets the percentile of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501


        :return: The percentile of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501
        :rtype: float
        """
        return self._percentile

    @percentile.setter
    def percentile(self, percentile):
        """Sets the percentile of this QAReportPrivacyDistanceToClosestRecord.


        :param percentile: The percentile of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501
        :type: float
        """

        self._percentile = percentile

    @property
    def training(self):
        """Gets the training of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501


        :return: The training of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501
        :rtype: float
        """
        return self._training

    @training.setter
    def training(self, training):
        """Sets the training of this QAReportPrivacyDistanceToClosestRecord.


        :param training: The training of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501
        :type: float
        """

        self._training = training

    @property
    def synthetic(self):
        """Gets the synthetic of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501


        :return: The synthetic of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501
        :rtype: float
        """
        return self._synthetic

    @synthetic.setter
    def synthetic(self, synthetic):
        """Sets the synthetic of this QAReportPrivacyDistanceToClosestRecord.


        :param synthetic: The synthetic of this QAReportPrivacyDistanceToClosestRecord.  # noqa: E501
        :type: float
        """

        self._synthetic = synthetic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QAReportPrivacyDistanceToClosestRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QAReportPrivacyDistanceToClosestRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
