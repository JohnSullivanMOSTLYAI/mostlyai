# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QAReportTableDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'accuracy': 'QAReportAccuracy',
        'columns': 'QAColumns',
        'rows': 'QARows',
        'sequence_length': 'QaReportSeqLen'
    }

    attribute_map = {
        'name': 'name',
        'accuracy': 'accuracy',
        'columns': 'columns',
        'rows': 'rows',
        'sequence_length': 'sequenceLength'
    }

    def __init__(self, name=None, accuracy=None, columns=None, rows=None, sequence_length=None):  # noqa: E501
        """QAReportTableDetails - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._accuracy = None
        self._columns = None
        self._rows = None
        self._sequence_length = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if accuracy is not None:
            self.accuracy = accuracy
        if columns is not None:
            self.columns = columns
        if rows is not None:
            self.rows = rows
        if sequence_length is not None:
            self.sequence_length = sequence_length

    @property
    def name(self):
        """Gets the name of this QAReportTableDetails.  # noqa: E501


        :return: The name of this QAReportTableDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this QAReportTableDetails.


        :param name: The name of this QAReportTableDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def accuracy(self):
        """Gets the accuracy of this QAReportTableDetails.  # noqa: E501


        :return: The accuracy of this QAReportTableDetails.  # noqa: E501
        :rtype: QAReportAccuracy
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this QAReportTableDetails.


        :param accuracy: The accuracy of this QAReportTableDetails.  # noqa: E501
        :type: QAReportAccuracy
        """

        self._accuracy = accuracy

    @property
    def columns(self):
        """Gets the columns of this QAReportTableDetails.  # noqa: E501


        :return: The columns of this QAReportTableDetails.  # noqa: E501
        :rtype: QAColumns
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this QAReportTableDetails.


        :param columns: The columns of this QAReportTableDetails.  # noqa: E501
        :type: QAColumns
        """

        self._columns = columns

    @property
    def rows(self):
        """Gets the rows of this QAReportTableDetails.  # noqa: E501


        :return: The rows of this QAReportTableDetails.  # noqa: E501
        :rtype: QARows
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this QAReportTableDetails.


        :param rows: The rows of this QAReportTableDetails.  # noqa: E501
        :type: QARows
        """

        self._rows = rows

    @property
    def sequence_length(self):
        """Gets the sequence_length of this QAReportTableDetails.  # noqa: E501


        :return: The sequence_length of this QAReportTableDetails.  # noqa: E501
        :rtype: QaReportSeqLen
        """
        return self._sequence_length

    @sequence_length.setter
    def sequence_length(self, sequence_length):
        """Sets the sequence_length of this QAReportTableDetails.


        :param sequence_length: The sequence_length of this QAReportTableDetails.  # noqa: E501
        :type: QaReportSeqLen
        """

        self._sequence_length = sequence_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QAReportTableDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QAReportTableDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
