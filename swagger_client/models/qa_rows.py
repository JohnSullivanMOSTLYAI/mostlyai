# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QARows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'synthetic_data': 'int',
        'source_data': 'int'
    }

    attribute_map = {
        'synthetic_data': 'syntheticData',
        'source_data': 'sourceData'
    }

    def __init__(self, synthetic_data=None, source_data=None):  # noqa: E501
        """QARows - a model defined in Swagger"""  # noqa: E501
        self._synthetic_data = None
        self._source_data = None
        self.discriminator = None
        if synthetic_data is not None:
            self.synthetic_data = synthetic_data
        if source_data is not None:
            self.source_data = source_data

    @property
    def synthetic_data(self):
        """Gets the synthetic_data of this QARows.  # noqa: E501


        :return: The synthetic_data of this QARows.  # noqa: E501
        :rtype: int
        """
        return self._synthetic_data

    @synthetic_data.setter
    def synthetic_data(self, synthetic_data):
        """Sets the synthetic_data of this QARows.


        :param synthetic_data: The synthetic_data of this QARows.  # noqa: E501
        :type: int
        """

        self._synthetic_data = synthetic_data

    @property
    def source_data(self):
        """Gets the source_data of this QARows.  # noqa: E501


        :return: The source_data of this QARows.  # noqa: E501
        :rtype: int
        """
        return self._source_data

    @source_data.setter
    def source_data(self, source_data):
        """Sets the source_data of this QARows.


        :param source_data: The source_data of this QARows.  # noqa: E501
        :type: int
        """

        self._source_data = source_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QARows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QARows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
