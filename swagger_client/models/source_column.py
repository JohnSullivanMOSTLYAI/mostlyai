# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'SourceColumnId',
        'generation_method': 'str',
        'included': 'bool',
        'encoding_type': 'str',
        'original_d_type': 'str',
        'consistency_correction': 'bool',
        'protect_values': 'bool',
        'sort_order': 'str'
    }

    attribute_map = {
        'id': 'id',
        'generation_method': 'generationMethod',
        'included': 'included',
        'encoding_type': 'encodingType',
        'original_d_type': 'originalDType',
        'consistency_correction': 'consistencyCorrection',
        'protect_values': 'protectValues',
        'sort_order': 'sortOrder'
    }

    def __init__(self, id=None, generation_method=None, included=None, encoding_type=None, original_d_type=None, consistency_correction=None, protect_values=None, sort_order=None):  # noqa: E501
        """SourceColumn - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._generation_method = None
        self._included = None
        self._encoding_type = None
        self._original_d_type = None
        self._consistency_correction = None
        self._protect_values = None
        self._sort_order = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if generation_method is not None:
            self.generation_method = generation_method
        if included is not None:
            self.included = included
        if encoding_type is not None:
            self.encoding_type = encoding_type
        if original_d_type is not None:
            self.original_d_type = original_d_type
        if consistency_correction is not None:
            self.consistency_correction = consistency_correction
        if protect_values is not None:
            self.protect_values = protect_values
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def id(self):
        """Gets the id of this SourceColumn.  # noqa: E501


        :return: The id of this SourceColumn.  # noqa: E501
        :rtype: SourceColumnId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceColumn.


        :param id: The id of this SourceColumn.  # noqa: E501
        :type: SourceColumnId
        """

        self._id = id

    @property
    def generation_method(self):
        """Gets the generation_method of this SourceColumn.  # noqa: E501


        :return: The generation_method of this SourceColumn.  # noqa: E501
        :rtype: str
        """
        return self._generation_method

    @generation_method.setter
    def generation_method(self, generation_method):
        """Sets the generation_method of this SourceColumn.


        :param generation_method: The generation_method of this SourceColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["ai", "primary_key", "foreign_key", "mock_data"]  # noqa: E501
        if generation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `generation_method` ({0}), must be one of {1}"  # noqa: E501
                .format(generation_method, allowed_values)
            )

        self._generation_method = generation_method

    @property
    def included(self):
        """Gets the included of this SourceColumn.  # noqa: E501


        :return: The included of this SourceColumn.  # noqa: E501
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this SourceColumn.


        :param included: The included of this SourceColumn.  # noqa: E501
        :type: bool
        """

        self._included = included

    @property
    def encoding_type(self):
        """Gets the encoding_type of this SourceColumn.  # noqa: E501


        :return: The encoding_type of this SourceColumn.  # noqa: E501
        :rtype: str
        """
        return self._encoding_type

    @encoding_type.setter
    def encoding_type(self, encoding_type):
        """Sets the encoding_type of this SourceColumn.


        :param encoding_type: The encoding_type of this SourceColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["categorical", "numeric_auto", "numeric_discrete", "numeric_binned", "numeric_digit", "latlong", "mock", "text", "character", "itt"]  # noqa: E501
        if encoding_type not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_type` ({0}), must be one of {1}"  # noqa: E501
                .format(encoding_type, allowed_values)
            )

        self._encoding_type = encoding_type

    @property
    def original_d_type(self):
        """Gets the original_d_type of this SourceColumn.  # noqa: E501


        :return: The original_d_type of this SourceColumn.  # noqa: E501
        :rtype: str
        """
        return self._original_d_type

    @original_d_type.setter
    def original_d_type(self, original_d_type):
        """Sets the original_d_type of this SourceColumn.


        :param original_d_type: The original_d_type of this SourceColumn.  # noqa: E501
        :type: str
        """

        self._original_d_type = original_d_type

    @property
    def consistency_correction(self):
        """Gets the consistency_correction of this SourceColumn.  # noqa: E501


        :return: The consistency_correction of this SourceColumn.  # noqa: E501
        :rtype: bool
        """
        return self._consistency_correction

    @consistency_correction.setter
    def consistency_correction(self, consistency_correction):
        """Sets the consistency_correction of this SourceColumn.


        :param consistency_correction: The consistency_correction of this SourceColumn.  # noqa: E501
        :type: bool
        """

        self._consistency_correction = consistency_correction

    @property
    def protect_values(self):
        """Gets the protect_values of this SourceColumn.  # noqa: E501

        Defines if Rare Category or Extreme value protection will be applied.  Applies to categorical, numeric, datetime, character and ITT types.   # noqa: E501

        :return: The protect_values of this SourceColumn.  # noqa: E501
        :rtype: bool
        """
        return self._protect_values

    @protect_values.setter
    def protect_values(self, protect_values):
        """Sets the protect_values of this SourceColumn.

        Defines if Rare Category or Extreme value protection will be applied.  Applies to categorical, numeric, datetime, character and ITT types.   # noqa: E501

        :param protect_values: The protect_values of this SourceColumn.  # noqa: E501
        :type: bool
        """

        self._protect_values = protect_values

    @property
    def sort_order(self):
        """Gets the sort_order of this SourceColumn.  # noqa: E501

        Only applies to one column in each sequence table. Does not apply to context tables.   # noqa: E501

        :return: The sort_order of this SourceColumn.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this SourceColumn.

        Only applies to one column in each sequence table. Does not apply to context tables.   # noqa: E501

        :param sort_order: The sort_order of this SourceColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"  # noqa: E501
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
