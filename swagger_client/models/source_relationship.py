# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceRelationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'SourceRelationshipId',
        'type': 'str',
        'column_id': 'SourceColumnId',
        'referenced_column_id': 'SourceColumnId',
        'smart_select_columns': 'object'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'column_id': 'columnId',
        'referenced_column_id': 'referencedColumnId',
        'smart_select_columns': 'smartSelectColumns'
    }

    def __init__(self, id=None, type=None, column_id=None, referenced_column_id=None, smart_select_columns=None):  # noqa: E501
        """SourceRelationship - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._column_id = None
        self._referenced_column_id = None
        self._smart_select_columns = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if column_id is not None:
            self.column_id = column_id
        if referenced_column_id is not None:
            self.referenced_column_id = referenced_column_id
        if smart_select_columns is not None:
            self.smart_select_columns = smart_select_columns

    @property
    def id(self):
        """Gets the id of this SourceRelationship.  # noqa: E501


        :return: The id of this SourceRelationship.  # noqa: E501
        :rtype: SourceRelationshipId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceRelationship.


        :param id: The id of this SourceRelationship.  # noqa: E501
        :type: SourceRelationshipId
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SourceRelationship.  # noqa: E501


        :return: The type of this SourceRelationship.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SourceRelationship.


        :param type: The type of this SourceRelationship.  # noqa: E501
        :type: str
        """
        allowed_values = ["context_foreign_key", "smart_select"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def column_id(self):
        """Gets the column_id of this SourceRelationship.  # noqa: E501


        :return: The column_id of this SourceRelationship.  # noqa: E501
        :rtype: SourceColumnId
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this SourceRelationship.


        :param column_id: The column_id of this SourceRelationship.  # noqa: E501
        :type: SourceColumnId
        """

        self._column_id = column_id

    @property
    def referenced_column_id(self):
        """Gets the referenced_column_id of this SourceRelationship.  # noqa: E501


        :return: The referenced_column_id of this SourceRelationship.  # noqa: E501
        :rtype: SourceColumnId
        """
        return self._referenced_column_id

    @referenced_column_id.setter
    def referenced_column_id(self, referenced_column_id):
        """Sets the referenced_column_id of this SourceRelationship.


        :param referenced_column_id: The referenced_column_id of this SourceRelationship.  # noqa: E501
        :type: SourceColumnId
        """

        self._referenced_column_id = referenced_column_id

    @property
    def smart_select_columns(self):
        """Gets the smart_select_columns of this SourceRelationship.  # noqa: E501


        :return: The smart_select_columns of this SourceRelationship.  # noqa: E501
        :rtype: object
        """
        return self._smart_select_columns

    @smart_select_columns.setter
    def smart_select_columns(self, smart_select_columns):
        """Sets the smart_select_columns of this SourceRelationship.


        :param smart_select_columns: The smart_select_columns of this SourceRelationship.  # noqa: E501
        :type: object
        """

        self._smart_select_columns = smart_select_columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceRelationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceRelationship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
