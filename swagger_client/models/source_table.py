# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'SourceTableId',
        'source_connector_id': 'ConnectorId',
        'original_name': 'str',
        'name': 'str',
        'model_qa_report_id': 'ModelQAReportId',
        'columns': 'list[SourceColumn]',
        'model_training_configurations': 'list[ModelTraining]'
    }

    attribute_map = {
        'id': 'id',
        'source_connector_id': 'sourceConnectorId',
        'original_name': 'originalName',
        'name': 'name',
        'model_qa_report_id': 'modelQAReportId',
        'columns': 'columns',
        'model_training_configurations': 'modelTrainingConfigurations'
    }

    def __init__(self, id=None, source_connector_id=None, original_name=None, name=None, model_qa_report_id=None, columns=None, model_training_configurations=None):  # noqa: E501
        """SourceTable - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_connector_id = None
        self._original_name = None
        self._name = None
        self._model_qa_report_id = None
        self._columns = None
        self._model_training_configurations = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_connector_id is not None:
            self.source_connector_id = source_connector_id
        if original_name is not None:
            self.original_name = original_name
        if name is not None:
            self.name = name
        if model_qa_report_id is not None:
            self.model_qa_report_id = model_qa_report_id
        if columns is not None:
            self.columns = columns
        if model_training_configurations is not None:
            self.model_training_configurations = model_training_configurations

    @property
    def id(self):
        """Gets the id of this SourceTable.  # noqa: E501


        :return: The id of this SourceTable.  # noqa: E501
        :rtype: SourceTableId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceTable.


        :param id: The id of this SourceTable.  # noqa: E501
        :type: SourceTableId
        """

        self._id = id

    @property
    def source_connector_id(self):
        """Gets the source_connector_id of this SourceTable.  # noqa: E501


        :return: The source_connector_id of this SourceTable.  # noqa: E501
        :rtype: ConnectorId
        """
        return self._source_connector_id

    @source_connector_id.setter
    def source_connector_id(self, source_connector_id):
        """Sets the source_connector_id of this SourceTable.


        :param source_connector_id: The source_connector_id of this SourceTable.  # noqa: E501
        :type: ConnectorId
        """

        self._source_connector_id = source_connector_id

    @property
    def original_name(self):
        """Gets the original_name of this SourceTable.  # noqa: E501


        :return: The original_name of this SourceTable.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this SourceTable.


        :param original_name: The original_name of this SourceTable.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def name(self):
        """Gets the name of this SourceTable.  # noqa: E501

        unique for a generator  # noqa: E501

        :return: The name of this SourceTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SourceTable.

        unique for a generator  # noqa: E501

        :param name: The name of this SourceTable.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model_qa_report_id(self):
        """Gets the model_qa_report_id of this SourceTable.  # noqa: E501


        :return: The model_qa_report_id of this SourceTable.  # noqa: E501
        :rtype: ModelQAReportId
        """
        return self._model_qa_report_id

    @model_qa_report_id.setter
    def model_qa_report_id(self, model_qa_report_id):
        """Sets the model_qa_report_id of this SourceTable.


        :param model_qa_report_id: The model_qa_report_id of this SourceTable.  # noqa: E501
        :type: ModelQAReportId
        """

        self._model_qa_report_id = model_qa_report_id

    @property
    def columns(self):
        """Gets the columns of this SourceTable.  # noqa: E501


        :return: The columns of this SourceTable.  # noqa: E501
        :rtype: list[SourceColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this SourceTable.


        :param columns: The columns of this SourceTable.  # noqa: E501
        :type: list[SourceColumn]
        """

        self._columns = columns

    @property
    def model_training_configurations(self):
        """Gets the model_training_configurations of this SourceTable.  # noqa: E501


        :return: The model_training_configurations of this SourceTable.  # noqa: E501
        :rtype: list[ModelTraining]
        """
        return self._model_training_configurations

    @model_training_configurations.setter
    def model_training_configurations(self, model_training_configurations):
        """Sets the model_training_configurations of this SourceTable.


        :param model_training_configurations: The model_training_configurations of this SourceTable.  # noqa: E501
        :type: list[ModelTraining]
        """

        self._model_training_configurations = model_training_configurations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
