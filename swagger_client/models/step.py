# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Step(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'StepId',
        'name': 'str',
        'model': 'str',
        'step': 'str',
        'iteration': 'str',
        'iteration_name': 'str',
        'duration': 'int',
        'messages': 'list[str]',
        'progress': 'Progress',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'model': 'model',
        'step': 'step',
        'iteration': 'iteration',
        'iteration_name': 'iterationName',
        'duration': 'duration',
        'messages': 'messages',
        'progress': 'progress',
        'status': 'status'
    }

    def __init__(self, id=None, name=None, model=None, step=None, iteration=None, iteration_name=None, duration=None, messages=None, progress=None, status=None):  # noqa: E501
        """Step - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._model = None
        self._step = None
        self._iteration = None
        self._iteration_name = None
        self._duration = None
        self._messages = None
        self._progress = None
        self._status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if model is not None:
            self.model = model
        if step is not None:
            self.step = step
        if iteration is not None:
            self.iteration = iteration
        if iteration_name is not None:
            self.iteration_name = iteration_name
        if duration is not None:
            self.duration = duration
        if messages is not None:
            self.messages = messages
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status

    @property
    def id(self):
        """Gets the id of this Step.  # noqa: E501


        :return: The id of this Step.  # noqa: E501
        :rtype: StepId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Step.


        :param id: The id of this Step.  # noqa: E501
        :type: StepId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Step.  # noqa: E501


        :return: The name of this Step.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Step.


        :param name: The name of this Step.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model(self):
        """Gets the model of this Step.  # noqa: E501


        :return: The model of this Step.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Step.


        :param model: The model of this Step.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def step(self):
        """Gets the step of this Step.  # noqa: E501


        :return: The step of this Step.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this Step.


        :param step: The step of this Step.  # noqa: E501
        :type: str
        """

        self._step = step

    @property
    def iteration(self):
        """Gets the iteration of this Step.  # noqa: E501


        :return: The iteration of this Step.  # noqa: E501
        :rtype: str
        """
        return self._iteration

    @iteration.setter
    def iteration(self, iteration):
        """Sets the iteration of this Step.


        :param iteration: The iteration of this Step.  # noqa: E501
        :type: str
        """

        self._iteration = iteration

    @property
    def iteration_name(self):
        """Gets the iteration_name of this Step.  # noqa: E501


        :return: The iteration_name of this Step.  # noqa: E501
        :rtype: str
        """
        return self._iteration_name

    @iteration_name.setter
    def iteration_name(self, iteration_name):
        """Sets the iteration_name of this Step.


        :param iteration_name: The iteration_name of this Step.  # noqa: E501
        :type: str
        """

        self._iteration_name = iteration_name

    @property
    def duration(self):
        """Gets the duration of this Step.  # noqa: E501

        duration in seconds  # noqa: E501

        :return: The duration of this Step.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Step.

        duration in seconds  # noqa: E501

        :param duration: The duration of this Step.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def messages(self):
        """Gets the messages of this Step.  # noqa: E501


        :return: The messages of this Step.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Step.


        :param messages: The messages of this Step.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def progress(self):
        """Gets the progress of this Step.  # noqa: E501


        :return: The progress of this Step.  # noqa: E501
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Step.


        :param progress: The progress of this Step.  # noqa: E501
        :type: Progress
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this Step.  # noqa: E501


        :return: The status of this Step.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Step.


        :param status: The status of this Step.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "pending", "queued", "running", "done", "error", "failed", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Step, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Step):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
