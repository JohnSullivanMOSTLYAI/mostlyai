# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyntheticColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'SyntheticColumnId',
        'generator_column_id': 'SourceColumnId',
        'name': 'str',
        'generation_method': 'str',
        'generation_mood': 'str',
        'rebalanced': 'bool',
        'imputed': 'bool',
        'mock_parameters': 'OneOfSyntheticColumnMockParameters',
        'primary_key_format': 'str',
        'rare_category_replacement': 'str'
    }

    attribute_map = {
        'id': 'id',
        'generator_column_id': 'generatorColumnId',
        'name': 'name',
        'generation_method': 'generationMethod',
        'generation_mood': 'generationMood',
        'rebalanced': 'rebalanced',
        'imputed': 'imputed',
        'mock_parameters': 'mockParameters',
        'primary_key_format': 'primaryKeyFormat',
        'rare_category_replacement': 'rareCategoryReplacement'
    }

    def __init__(self, id=None, generator_column_id=None, name=None, generation_method=None, generation_mood=None, rebalanced=None, imputed=None, mock_parameters=None, primary_key_format=None, rare_category_replacement=None):  # noqa: E501
        """SyntheticColumn - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._generator_column_id = None
        self._name = None
        self._generation_method = None
        self._generation_mood = None
        self._rebalanced = None
        self._imputed = None
        self._mock_parameters = None
        self._primary_key_format = None
        self._rare_category_replacement = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if generator_column_id is not None:
            self.generator_column_id = generator_column_id
        if name is not None:
            self.name = name
        if generation_method is not None:
            self.generation_method = generation_method
        if generation_mood is not None:
            self.generation_mood = generation_mood
        if rebalanced is not None:
            self.rebalanced = rebalanced
        if imputed is not None:
            self.imputed = imputed
        if mock_parameters is not None:
            self.mock_parameters = mock_parameters
        if primary_key_format is not None:
            self.primary_key_format = primary_key_format
        if rare_category_replacement is not None:
            self.rare_category_replacement = rare_category_replacement

    @property
    def id(self):
        """Gets the id of this SyntheticColumn.  # noqa: E501


        :return: The id of this SyntheticColumn.  # noqa: E501
        :rtype: SyntheticColumnId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SyntheticColumn.


        :param id: The id of this SyntheticColumn.  # noqa: E501
        :type: SyntheticColumnId
        """

        self._id = id

    @property
    def generator_column_id(self):
        """Gets the generator_column_id of this SyntheticColumn.  # noqa: E501


        :return: The generator_column_id of this SyntheticColumn.  # noqa: E501
        :rtype: SourceColumnId
        """
        return self._generator_column_id

    @generator_column_id.setter
    def generator_column_id(self, generator_column_id):
        """Sets the generator_column_id of this SyntheticColumn.


        :param generator_column_id: The generator_column_id of this SyntheticColumn.  # noqa: E501
        :type: SourceColumnId
        """

        self._generator_column_id = generator_column_id

    @property
    def name(self):
        """Gets the name of this SyntheticColumn.  # noqa: E501


        :return: The name of this SyntheticColumn.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SyntheticColumn.


        :param name: The name of this SyntheticColumn.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def generation_method(self):
        """Gets the generation_method of this SyntheticColumn.  # noqa: E501


        :return: The generation_method of this SyntheticColumn.  # noqa: E501
        :rtype: str
        """
        return self._generation_method

    @generation_method.setter
    def generation_method(self, generation_method):
        """Sets the generation_method of this SyntheticColumn.


        :param generation_method: The generation_method of this SyntheticColumn.  # noqa: E501
        :type: str
        """

        self._generation_method = generation_method

    @property
    def generation_mood(self):
        """Gets the generation_mood of this SyntheticColumn.  # noqa: E501


        :return: The generation_mood of this SyntheticColumn.  # noqa: E501
        :rtype: str
        """
        return self._generation_mood

    @generation_mood.setter
    def generation_mood(self, generation_mood):
        """Sets the generation_mood of this SyntheticColumn.


        :param generation_mood: The generation_mood of this SyntheticColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["extremely_boring", "very_conservative", "conservative", "medium_conservative", "mild_conservative", "representative", "mild_creative", "medium_creative", "creative", "very_creative", "extremely_crazy"]  # noqa: E501
        if generation_mood not in allowed_values:
            raise ValueError(
                "Invalid value for `generation_mood` ({0}), must be one of {1}"  # noqa: E501
                .format(generation_mood, allowed_values)
            )

        self._generation_mood = generation_mood

    @property
    def rebalanced(self):
        """Gets the rebalanced of this SyntheticColumn.  # noqa: E501


        :return: The rebalanced of this SyntheticColumn.  # noqa: E501
        :rtype: bool
        """
        return self._rebalanced

    @rebalanced.setter
    def rebalanced(self, rebalanced):
        """Sets the rebalanced of this SyntheticColumn.


        :param rebalanced: The rebalanced of this SyntheticColumn.  # noqa: E501
        :type: bool
        """

        self._rebalanced = rebalanced

    @property
    def imputed(self):
        """Gets the imputed of this SyntheticColumn.  # noqa: E501


        :return: The imputed of this SyntheticColumn.  # noqa: E501
        :rtype: bool
        """
        return self._imputed

    @imputed.setter
    def imputed(self, imputed):
        """Sets the imputed of this SyntheticColumn.


        :param imputed: The imputed of this SyntheticColumn.  # noqa: E501
        :type: bool
        """

        self._imputed = imputed

    @property
    def mock_parameters(self):
        """Gets the mock_parameters of this SyntheticColumn.  # noqa: E501


        :return: The mock_parameters of this SyntheticColumn.  # noqa: E501
        :rtype: OneOfSyntheticColumnMockParameters
        """
        return self._mock_parameters

    @mock_parameters.setter
    def mock_parameters(self, mock_parameters):
        """Sets the mock_parameters of this SyntheticColumn.


        :param mock_parameters: The mock_parameters of this SyntheticColumn.  # noqa: E501
        :type: OneOfSyntheticColumnMockParameters
        """

        self._mock_parameters = mock_parameters

    @property
    def primary_key_format(self):
        """Gets the primary_key_format of this SyntheticColumn.  # noqa: E501

        Applies for primary key column of subject table only. Specifies the format of the key.   # noqa: E501

        :return: The primary_key_format of this SyntheticColumn.  # noqa: E501
        :rtype: str
        """
        return self._primary_key_format

    @primary_key_format.setter
    def primary_key_format(self, primary_key_format):
        """Sets the primary_key_format of this SyntheticColumn.

        Applies for primary key column of subject table only. Specifies the format of the key.   # noqa: E501

        :param primary_key_format: The primary_key_format of this SyntheticColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["uuid4", "uuid4_dashless", "uuid4_short", "sequential"]  # noqa: E501
        if primary_key_format not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_key_format` ({0}), must be one of {1}"  # noqa: E501
                .format(primary_key_format, allowed_values)
            )

        self._primary_key_format = primary_key_format

    @property
    def rare_category_replacement(self):
        """Gets the rare_category_replacement of this SyntheticColumn.  # noqa: E501

        Specifies, if the rare categories will be replaced by a constant _RARE_ or by a sample from non-rare categories.   # noqa: E501

        :return: The rare_category_replacement of this SyntheticColumn.  # noqa: E501
        :rtype: str
        """
        return self._rare_category_replacement

    @rare_category_replacement.setter
    def rare_category_replacement(self, rare_category_replacement):
        """Sets the rare_category_replacement of this SyntheticColumn.

        Specifies, if the rare categories will be replaced by a constant _RARE_ or by a sample from non-rare categories.   # noqa: E501

        :param rare_category_replacement: The rare_category_replacement of this SyntheticColumn.  # noqa: E501
        :type: str
        """
        allowed_values = ["constant", "sample"]  # noqa: E501
        if rare_category_replacement not in allowed_values:
            raise ValueError(
                "Invalid value for `rare_category_replacement` ({0}), must be one of {1}"  # noqa: E501
                .format(rare_category_replacement, allowed_values)
            )

        self._rare_category_replacement = rare_category_replacement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyntheticColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyntheticColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
