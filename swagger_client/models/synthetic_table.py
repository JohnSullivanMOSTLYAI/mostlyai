# coding: utf-8

"""
    Public API of Mostly AI

    Public API of Mostly AI  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SyntheticTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'SyntheticTableId',
        'generator_table_id': 'str',
        'generation_size': 'int',
        'generation_size_unit': 'str',
        'columns': 'list[SyntheticColumn]'
    }

    attribute_map = {
        'id': 'id',
        'generator_table_id': 'generatorTableId',
        'generation_size': 'generationSize',
        'generation_size_unit': 'generationSizeUnit',
        'columns': 'columns'
    }

    def __init__(self, id=None, generator_table_id=None, generation_size=None, generation_size_unit=None, columns=None):  # noqa: E501
        """SyntheticTable - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._generator_table_id = None
        self._generation_size = None
        self._generation_size_unit = None
        self._columns = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if generator_table_id is not None:
            self.generator_table_id = generator_table_id
        if generation_size is not None:
            self.generation_size = generation_size
        if generation_size_unit is not None:
            self.generation_size_unit = generation_size_unit
        if columns is not None:
            self.columns = columns

    @property
    def id(self):
        """Gets the id of this SyntheticTable.  # noqa: E501


        :return: The id of this SyntheticTable.  # noqa: E501
        :rtype: SyntheticTableId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SyntheticTable.


        :param id: The id of this SyntheticTable.  # noqa: E501
        :type: SyntheticTableId
        """

        self._id = id

    @property
    def generator_table_id(self):
        """Gets the generator_table_id of this SyntheticTable.  # noqa: E501


        :return: The generator_table_id of this SyntheticTable.  # noqa: E501
        :rtype: str
        """
        return self._generator_table_id

    @generator_table_id.setter
    def generator_table_id(self, generator_table_id):
        """Sets the generator_table_id of this SyntheticTable.


        :param generator_table_id: The generator_table_id of this SyntheticTable.  # noqa: E501
        :type: str
        """

        self._generator_table_id = generator_table_id

    @property
    def generation_size(self):
        """Gets the generation_size of this SyntheticTable.  # noqa: E501


        :return: The generation_size of this SyntheticTable.  # noqa: E501
        :rtype: int
        """
        return self._generation_size

    @generation_size.setter
    def generation_size(self, generation_size):
        """Sets the generation_size of this SyntheticTable.


        :param generation_size: The generation_size of this SyntheticTable.  # noqa: E501
        :type: int
        """

        self._generation_size = generation_size

    @property
    def generation_size_unit(self):
        """Gets the generation_size_unit of this SyntheticTable.  # noqa: E501


        :return: The generation_size_unit of this SyntheticTable.  # noqa: E501
        :rtype: str
        """
        return self._generation_size_unit

    @generation_size_unit.setter
    def generation_size_unit(self, generation_size_unit):
        """Sets the generation_size_unit of this SyntheticTable.


        :param generation_size_unit: The generation_size_unit of this SyntheticTable.  # noqa: E501
        :type: str
        """
        allowed_values = ["percentage", "rows", "seed"]  # noqa: E501
        if generation_size_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `generation_size_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(generation_size_unit, allowed_values)
            )

        self._generation_size_unit = generation_size_unit

    @property
    def columns(self):
        """Gets the columns of this SyntheticTable.  # noqa: E501


        :return: The columns of this SyntheticTable.  # noqa: E501
        :rtype: list[SyntheticColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this SyntheticTable.


        :param columns: The columns of this SyntheticTable.  # noqa: E501
        :type: list[SyntheticColumn]
        """

        self._columns = columns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyntheticTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyntheticTable):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
